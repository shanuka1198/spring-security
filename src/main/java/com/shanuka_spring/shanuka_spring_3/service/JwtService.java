package com.shanuka_spring.shanuka_spring_3.service;

import com.shanuka_spring.shanuka_spring_3.entity.UserEntity;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import javax.crypto.SecretKey;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Service
public class JwtService {

    @Value("${jwt.secret}")
    private String secretKey;

    // üîπ JWT Token Generate ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (User info ‡∑É‡∑Ñ Token Expiration ‡∑É‡∂∏‡∂ü)
    public String generateToken(UserEntity user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("email", user.getEmail());

        return Jwts.builder()
                .setClaims(claims)
                .setSubject(user.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 1 hour
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)  // üî• Corrected Secret Key
                .compact();
    }

    // üîπ Secret Key Generate ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Fix)
    private SecretKey getSigningKey() {
        byte[] keyBytes = Base64.getDecoder().decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    // üîπ Token Valid‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è check ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Fix)
    public boolean validateToken(String token, String username) {
        return extractUsername(token).equals(username) && !isTokenExpired(token);
    }

    // üîπ Token Expired ‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è check ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    // üîπ Token Expiration Date ‡∂ë‡∂ö extract ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    private Date extractExpiration(String token) {
        return extractClaims(token, Claims::getExpiration);
    }

    // üîπ Claims Extract ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    private <T> T extractClaims(String token, Function<Claims, T> claimsResolver) {
        Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser()  // Jwts.parser() ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                .setSigningKey(getSigningKey())
                .build()// Signing key ‡∂ë‡∂ö set ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                .parseClaimsJws(token)  // JWT token ‡∂ë‡∂ö parse ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                .getBody();  // Claims ‡∂ë‡∂ö return ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    }

    // üîπ Token ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Username ‡∂ë‡∂ö extract ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    public String extractUsername(String token) {
        return extractClaims(token, Claims::getSubject);
    }
}
